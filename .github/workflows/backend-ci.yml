name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - 'api/**'
      - 'ai_tools/**'
      - 'ai_capabilities/**'
      - 'tests/**'
      - 'requirements.txt'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'api/**'
      - 'ai_tools/**'
      - 'ai_capabilities/**'
      - 'tests/**'
      - 'requirements.txt'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: life_os_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/life_os_test
          REDIS_URL: redis://localhost:6379/0
          GEMINI_API_KEY: test_key_for_ci
          OPENAI_API_KEY: test_key_for_ci
          REQUIRE_AUTH: false
          JWT_SECRET_KEY: test_secret_key_for_ci_only
        run: |
          # Run tests excluding manual test scripts
          pytest tests/ -v \
            --ignore=tests/manual/ \
            --ignore=scripts/ \
            --tb=short \
            --maxfail=10 \
            -m "not slow"

      - name: Generate coverage report
        if: always()
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/life_os_test
          REDIS_URL: redis://localhost:6379/0
          GEMINI_API_KEY: test_key_for_ci
          OPENAI_API_KEY: test_key_for_ci
          REQUIRE_AUTH: false
          JWT_SECRET_KEY: test_secret_key_for_ci_only
        run: |
          pytest tests/ \
            --ignore=tests/manual/ \
            --ignore=scripts/ \
            --cov=api \
            --cov=ai_tools \
            --cov-report=xml \
            --cov-report=term \
            -m "not slow" \
            || true  # Don't fail on coverage, just generate report

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true  # Don't fail CI if upload fails

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort

      - name: Run ruff (linter)
        run: |
          ruff check api/ ai_tools/ ai_capabilities/ --exit-zero
        continue-on-error: true

      - name: Run black (formatter check)
        run: |
          black --check api/ ai_tools/ ai_capabilities/ --diff || true
        continue-on-error: true

      - name: Run isort (import sorter check)
        run: |
          isort --check-only api/ ai_tools/ ai_capabilities/ --diff || true
        continue-on-error: true
