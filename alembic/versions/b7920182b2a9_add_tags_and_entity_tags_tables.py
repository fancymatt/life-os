"""Add tags and entity_tags tables

Revision ID: b7920182b2a9
Revises: 20251023_162213
Create Date: 2025-10-24 00:26:51.133731

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b7920182b2a9'
down_revision: Union[str, Sequence[str], None] = '20251023_162213'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('color', sa.String(length=20), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tags_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tags'))
    )
    op.create_index('ix_tag_category', 'tags', ['category'], unique=False)
    op.create_index('ix_tag_name_lower', 'tags', ['name'], unique=False)
    op.create_index('ix_tag_usage', 'tags', ['usage_count'], unique=False)
    op.create_index(op.f('ix_tags_category'), 'tags', ['category'], unique=False)
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_index(op.f('ix_tags_tag_id'), 'tags', ['tag_id'], unique=True)
    op.create_index(op.f('ix_tags_user_id'), 'tags', ['user_id'], unique=False)
    op.create_table('entity_tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entity_type', sa.String(length=100), nullable=False),
    sa.Column('entity_id', sa.String(length=100), nullable=False),
    sa.Column('tag_id', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], name=op.f('fk_entity_tags_tag_id_tags')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_entity_tags'))
    )
    op.create_index('ix_entity_tag_entity', 'entity_tags', ['entity_type', 'entity_id'], unique=False)
    op.create_index('ix_entity_tag_tag', 'entity_tags', ['tag_id'], unique=False)
    op.create_index('ix_entity_tag_unique', 'entity_tags', ['entity_type', 'entity_id', 'tag_id'], unique=True)
    op.create_index(op.f('ix_entity_tags_entity_id'), 'entity_tags', ['entity_id'], unique=False)
    op.create_index(op.f('ix_entity_tags_entity_type'), 'entity_tags', ['entity_type'], unique=False)
    op.create_index(op.f('ix_entity_tags_tag_id'), 'entity_tags', ['tag_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_entity_tags_tag_id'), table_name='entity_tags')
    op.drop_index(op.f('ix_entity_tags_entity_type'), table_name='entity_tags')
    op.drop_index(op.f('ix_entity_tags_entity_id'), table_name='entity_tags')
    op.drop_index('ix_entity_tag_unique', table_name='entity_tags')
    op.drop_index('ix_entity_tag_tag', table_name='entity_tags')
    op.drop_index('ix_entity_tag_entity', table_name='entity_tags')
    op.drop_table('entity_tags')
    op.drop_index(op.f('ix_tags_user_id'), table_name='tags')
    op.drop_index(op.f('ix_tags_tag_id'), table_name='tags')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_index(op.f('ix_tags_category'), table_name='tags')
    op.drop_index('ix_tag_usage', table_name='tags')
    op.drop_index('ix_tag_name_lower', table_name='tags')
    op.drop_index('ix_tag_category', table_name='tags')
    op.drop_table('tags')
    # ### end Alembic commands ###
